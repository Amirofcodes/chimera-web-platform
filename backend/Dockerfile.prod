# Use the official PHP 8.1 FPM image as the base for a production environment.
FROM php:8.1-fpm

# ------------------------------------------------------------------------------
# Install System Dependencies and PHP Extensions
# ------------------------------------------------------------------------------
# Update package lists and install required packages:
# - nginx: Web server to serve the application.
# - libpng-dev, libjpeg-dev, libfreetype6-dev: Libraries for image processing.
# - zip, unzip: Tools for managing compressed files.
# - curl: Used for downloading Composer installer.
# Then, install the pdo_mysql extension for MySQL database interaction and
# configure and install the GD extension for image processing with JPEG and Freetype support.
RUN apt-get update && apt-get install -y \
    nginx \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    zip \
    unzip \
    curl \
    && docker-php-ext-install pdo_mysql \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# ------------------------------------------------------------------------------
# Set Working Directory
# ------------------------------------------------------------------------------
# Set the working directory inside the container where the application code will reside.
WORKDIR /var/www/html

# ------------------------------------------------------------------------------
# Copy Composer Files and Install Dependencies
# ------------------------------------------------------------------------------
# Copy composer.json and composer.lock to leverage Docker layer caching.
COPY composer.json composer.lock* /var/www/html/

# Download and install Composer, the dependency manager for PHP.
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Install PHP dependencies defined in composer.json without development packages,
# and optimize the autoloader for production.
RUN composer install --no-dev --optimize-autoloader

# ------------------------------------------------------------------------------
# Configure PHP for Production
# ------------------------------------------------------------------------------
# Replace the default PHP configuration with the production version.
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# ------------------------------------------------------------------------------
# Configure Logging
# ------------------------------------------------------------------------------
# Create directories for nginx and PHP logs, create log files, set ownership and permissions.
RUN mkdir -p /var/log/nginx /var/log/php \
    && touch /var/log/nginx/error.log /var/log/nginx/access.log /var/log/php/fpm-error.log \
    && chown -R www-data:www-data /var/log/nginx /var/log/php \
    && chmod 755 /var/log/nginx /var/log/php

# ------------------------------------------------------------------------------
# Copy Configuration Files and Entrypoint Script
# ------------------------------------------------------------------------------
# Copy the nginx configuration file into the container.
COPY nginx/default.conf /etc/nginx/conf.d/default.conf
# Copy the PHP-FPM configuration file.
COPY php/www.conf /usr/local/etc/php-fpm.d/www.conf
# Copy custom PHP configuration settings.
COPY php/custom.ini /usr/local/etc/php/conf.d/custom.ini
# Copy the Docker entrypoint script and make it executable.
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# ------------------------------------------------------------------------------
# Copy Application Source Code
# ------------------------------------------------------------------------------
# Copy the entire application source code into the working directory.
COPY src/ /var/www/html/

# ------------------------------------------------------------------------------
# Expose Port and Set Entrypoint
# ------------------------------------------------------------------------------
# Expose port 80 to allow external access to the web server.
EXPOSE 80

# Define the container's entrypoint to run the custom entrypoint script.
ENTRYPOINT ["docker-entrypoint.sh"]
